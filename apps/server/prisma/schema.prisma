// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum NotificationChannel {
  EMAIL
  SMS
}

model User {
  id       String @id @default(uuid())
  username String @unique @default(cuid())
  password String
  roles    Role[] @default([USER])

  firstName  String
  lastName   String
  email      String   @unique
  phone      String   @unique
  nationalId String   @unique
  birthDate  DateTime
  address    String?

  isBlocked  Boolean @default(false)
  isVerified Boolean @default(false)

  prefferedNotificationChannels NotificationChannel[] @default([EMAIL, SMS])
  prefferedNotificationTypes    NotificationType[]    @default([INFO])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Token {
  id        String   @id @default(uuid())
  userId    String
  token     String   @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@map("tokens")
}

model RegisterToken {
  id     String  @id @default(uuid())
  token  String  @default(cuid())
  isUsed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@map("register_tokens")
}

model Auction {
  id        String @id @default(uuid())
  name      String
  productId String

  startedAt DateTime
  endAt     DateTime
  duration  Int

  winnerId         String?
  winningOfferId   String?
  isWinnerSelected Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("auctions")
}

model Config {
  id          String @id @default(uuid())
  title       String
  description String
  key         String @unique
  value       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("configs")
}

model Notification {
  id          String  @id @default(uuid())
  title       String
  description String
  isSeen      Boolean @default(false)
  userId      String
  url         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Offer {
  id        String @id @default(uuid())
  auctionId String
  userId    String
  offer     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("offers")
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Float
  startPrice  Float
  isPublished Boolean  @default(false)
  images      String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Visit {
  id        String @id @default(uuid())
  ip        String
  userAgent String

  Analytic   Analytic? @relation(fields: [analyticId], references: [id])
  analyticId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("visits")
}

model Analytic {
  id     String  @id @default(uuid())
  url    String
  visits Visit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("analytics")
}
